{
    "contents" : "#================================================================================\n# @plot-wrapper.r, A simple wrapper for plot functions\n#\n# This script was developed as part of PhD thesis\n# \n# @author Antonio Prestes Garcia\n# @date Feb/2015\n#\n# Changelog:\n# \n#================================================================================\n\n#--------------------------------------------------------------------------------\n# saveAsPDF\n# \n# @param f The file name \n#--------------------------------------------------------------------------------\nbs.saveAsPDF<- function(f) {\n  pdf(file=f)\n}\n\n#--------------------------------------------------------------------------------\n# saveAsEPS\n# \n# @param f The file name \n#--------------------------------------------------------------------------------\nbs.saveAsEPS<- function(f) {\n  setEPS()\n  postscript(f)\n}\n\n#--------------------------------------------------------------------------------\n# saveAsEPS\n# \n# @param F The file name \n#--------------------------------------------------------------------------------\nbs.saveAsTIFF<- function(f) {\n  tiff(f, compression = \"lzw\")\n}\n\n#--------------------------------------------------------------------------------\n# closeGraphic\n# \n#--------------------------------------------------------------------------------\nbs.closeGraphic<- function() {\n  suppress<- dev.off()\n}\n\n#--------------------------------------------------------------------------------\n# beginPlot\n# \n# @param title\n# @param label.x\n# @param label.y\n# @return g A ggplot with no layers\n#--------------------------------------------------------------------------------\nbs.beginPlot<- function(title,label.x,label.y,lim.x, lim.y) {\n  g<- ggplot()\n  g<- g + theme_bw()\n  g<- g + labs(title=title)\n  g<- g + xlab(label.x)\n  g<- g + ylab(label.y)\n  g<- g + xlim(lim.x)\n  g<- g + ylim(lim.y)\n  g<- g + theme(axis.text=element_text(size=14), axis.title=element_text(size=16,face=\"bold\"), legend.position=bs.legendPos(), panel.grid.minor = element_blank(), legend.title = element_blank(), legend.background = element_blank())\n  g$index<- 0\n  return(g)\n}\n\n#--------------------------------------------------------------------------------\n# endPlot\n#\n# @param g The graphic object to be closed \n#--------------------------------------------------------------------------------\nbs.endPlot<- function(g) {\n  g<- g + scale_colour_manual(values=g$mycolors)\n  g<- g + scale_fill_manual(values=g$mycolors)\n  return(g)\n}\n\n#--------------------------------------------------------------------------------\n# legendPos\n#\n#--------------------------------------------------------------------------------\nbs.legendPos<- function() {\n  return(c(0.15,0.90))\n}\n\n#--------------------------------------------------------------------------------\n# addPoints\n# \n#--------------------------------------------------------------------------------\nbs.addPoints<- function(g,d,x,y,l,color,name) {\n  d<- local(d)\n  d[l]<- factor(as.character(name))\n  g<- g + geom_point(data=d,aes_string(x=x, y=y,color=l,fill=l)) \n  g$mycolors<- c(g$mycolors,c(color))  \n  return(g)\n}\n\n#--------------------------------------------------------------------------------\n# addLine\n# \n#--------------------------------------------------------------------------------\nbs.addLine<- function(g,d,x,y,l,color, name) {\n  d<- local(d)\n  d[l]<- factor(as.character(name))\n  g<- g + geom_line(data=d,aes_string(x=x, y=y,color=l,fill=l)) \n  g$mycolors<- c(g$mycolors,c(color))  \n  return(g)\n}\n",
    "created" : 1426672159592.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "682372821",
    "id" : "7835B384",
    "lastKnownWriteTime" : 1426692742,
    "path" : "~/R-Projects/bactosim/R/plot-wrapper.r",
    "project_path" : "R/plot-wrapper.r",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "source_on_save" : false,
    "type" : "r_source"
}